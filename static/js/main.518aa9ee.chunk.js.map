{"version":3,"sources":["containers/App.js","index.js"],"names":["pageNum","InfiniteScroll","useState","list","postList","setPostList","useEffect","fetch","then","rep","json","data","catch","console","log","page","setPage","isNotEnd","setNotIsEnd","loader","useRef","observer","IntersectionObserver","handleObserver","root","rootMargin","threshold","current","observe","setTimeout","length","newList","concat","entities","isIntersecting","className","map","post","index","id","name","description","href","homepage","html_url","src","judgement","ref","isEndorNot","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iKAIIA,EAAU,EAgHCC,GA9GR,iEADK,EACL,iBAA2ED,GAG3D,WAAO,IAAD,EAEQE,mBAAS,CACtCC,KAAM,KAHe,mBAEjBC,EAFiB,KAEPC,EAFO,KAM3BC,qBAAU,WACK,IAAVN,GACHO,MAAM,0DAAD,OAZG,EAYH,iBAAyEP,IAC3EQ,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAAAG,GACJN,EAAY,CAACF,KAAMQ,IACnBX,OAEDY,MAAMC,QAAQC,OAChB,IAfwB,MAmBDZ,mBAAS,GAnBR,mBAmBlBa,EAnBkB,KAmBZC,EAnBY,OAoBOd,oBAAS,GApBhB,mBAoBlBe,EApBkB,KAoBRC,EApBQ,KAsBnBC,EAASC,iBAAO,MAEtBd,qBAAU,WACL,IAKMe,EAAW,IAAIC,qBAAqBC,EAL5B,CACXC,KAAM,KACNC,WAAY,MACZC,UAAW,IAGVP,EAAOQ,SACRN,EAASO,QAAQT,EAAOQ,WAE7B,IAEHrB,qBAAU,WACHN,GAAS,GACZ6B,YAAW,WAAKtB,MAAM,0DAAD,OA1CjB,EA0CiB,iBAAyEP,IACvFQ,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAAAG,GACJ,GAAiB,IAAdA,EAAKmB,OAAY,CACnB,IAAMC,EAAU3B,EAASD,KAAK6B,OAAOrB,GACrCN,EAAY,CAACF,KAAM4B,IACnB/B,SAEAkB,GAAY,MAGdN,MAAMC,QAAQC,OAAO,OAC7B,CAACC,IAEF,IAAMQ,EAAiB,SAACU,GACTA,EAAS,GACbC,gBACPlB,GAAQ,SAACD,GAAD,OAAUA,EAAO,MAe3B,OACM,qBAAKoB,UAAU,YAAf,SACE,sBAAKA,UAAU,YAAf,UAEA/B,EAASD,KAAKiC,KAAI,SAACC,EAAMC,GACrB,OAAQ,sBAAiBH,UAAU,qBAA3B,UACE,gCACA,mBAAGA,UAAU,eAAb,iBACA,qBAAIA,UAAU,eAAd,cAA+BE,EAAKE,GAApC,UAEA,gCACE,mBAAGJ,UAAU,eAAb,mBACA,qBAAIA,UAAU,eAAd,cAA+BE,EAAKG,KAApC,UAEF,gCACE,mBAAGL,UAAU,eAAb,0BACA,qBAAIA,UAAU,eAAd,cAA+BE,EAAKI,YAApC,UAEF,gCACE,mBAAGN,UAAU,eAAb,uBACA,oBAAGO,KAAML,EAAKM,SAAUR,UAAU,eAAlC,cAAmDE,EAAKM,SAAxD,UAEF,gCACE,mBAAGR,UAAU,eAAb,yBACA,oBAAGO,KAAML,EAAKO,SAAUT,UAAU,eAAlC,cAAmDE,EAAKO,SAAxD,UAEF,qBAAKC,IAAG,+BAA0BP,OArB1BA,MAhBb,SAACQ,GAClB,GAAIA,EACF,OACM,sBAAKX,UAAU,sBAAsBY,IAAK5B,EAA1C,UACE,wBACA,wBACA,2BAoCD6B,CAAW/B,UC1G5BgC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.518aa9ee.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef  } from 'react';\nimport './App.css';\nimport 'tachyons';\n\nlet pageNum = 1;\nlet limit = 4;\nlet url = `https://api.github.com/users/kailun-liu/repos?per_page=${limit}&page=${pageNum}`;\n\n\nconst InfiniteScroll = () => {\n\n     const [postList, setPostList] = useState({\n        list: []\n      }); \n\n  useEffect(()=>{\n    if(pageNum===1) {\n    fetch(`https://api.github.com/users/kailun-liu/repos?per_page=${limit}&page=${pageNum}`)\n      .then(rep=>rep.json())\n      .then(data=>{\n        setPostList({list: data})\n        pageNum++;\n      })\n      .catch(console.log)}\n  }, [])\n\n\n    // tracking on which page we currently are\n    const [page, setPage] = useState(1);\n    const [isNotEnd, setNotIsEnd] = useState(true);\n    // add loader refrence \n    const loader = useRef(null);\n\n    useEffect(() => {\n         var options = {\n            root: null,\n            rootMargin: \"0px\",\n            threshold: 1.0\n         };\n         const observer = new IntersectionObserver(handleObserver, options);\n         if (loader.current) {\n            observer.observe(loader.current)\n         }\n    }, []);\n\n    useEffect(() => {\n        if(pageNum>=2) {\n        setTimeout(()=>{fetch(`https://api.github.com/users/kailun-liu/repos?per_page=${limit}&page=${pageNum}`)\n              .then(rep=>rep.json())\n              .then(data=>{\n                if(data.length!==0) {\n                 const newList = postList.list.concat(data);\n                 setPostList({list: newList})\n                 pageNum++;\n               } else {\n                 setNotIsEnd(false);\n               }\n              })\n              .catch(console.log)}, 500)}\n    }, [page])\n\n      const handleObserver = (entities) => {\n      const target = entities[0];\n      if (target.isIntersecting) {  \n          setPage((page) => page + 1)\n        }\n      }\n\n      const isEndorNot = (judgement) => {\n        if (judgement) {\n          return (\n                <div className=\"loading show loader\" ref={loader}>\n                  <div></div>\n                  <div></div>\n                  <div></div>\n                </div>\n            )\n        }\n      }\n        return (\n              <div className=\"container\" >\n                <div className=\"post-list\">\n                {\n                postList.list.map((post, index) => {\n                    return (<div key={index} className=\"post divStyle grow\" >\n                              <div>\n                              <p className=\"w-50 pa2 mr2\">ID:</p>\n                              <h2 className=\"w-50 pa2 mr2\"> {post.id} </h2>\n                              </div>\n                              <div>\n                                <p className=\"w-50 pa2 mr2\">Name:</p>\n                                <h2 className=\"w-50 pa2 mr2\"> {post.name} </h2>\n                              </div>\n                              <div>\n                                <p className=\"w-50 pa2 mr2\">Description:</p>\n                                <h2 className=\"w-50 pa2 mr2\"> {post.description} </h2>\n                              </div>\n                              <div>\n                                <p className=\"w-50 pa2 mr2\">Homepage:</p>\n                                <a href={post.homepage} className=\"w-50 pa2 mr2\"> {post.homepage} </a>\n                              </div>\n                              <div>\n                                <p className=\"w-50 pa2 mr2\">GitHub URL:</p>\n                                <a href={post.html_url} className=\"w-50 pa2 mr2\"> {post.html_url} </a>\n                              </div>\n                              <img src={`https://robohash.org/${index}`}/>\n                          </div>\n                        )\n                })                 \n                }\n                {isEndorNot(isNotEnd)}\n            </div>\n          </div>\n          )\n      }\n    \nexport default InfiniteScroll; ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\n\nReactDOM.render(\n  <React.StrictMode> \n  \t\t<App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}